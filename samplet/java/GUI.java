package eoaus;

import java.util.Map;

public class GUI extends javax.swing.JFrame {
	protected AgArchAffective control;

    /** Creates new form GUI */
    public GUI(AgArchAffective aaf) {
		control = aaf;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        potencia = new javax.swing.JPanel();
        happyFor = new javax.swing.JLabel();
        resentment = new javax.swing.JLabel();
        joy = new javax.swing.JLabel();
        pride = new javax.swing.JLabel();
        admiration = new javax.swing.JLabel();
        love = new javax.swing.JLabel();
        hope = new javax.swing.JLabel();
        satisfaction = new javax.swing.JLabel();
        relief = new javax.swing.JLabel();
        gratification = new javax.swing.JLabel();
        gratitude = new javax.swing.JLabel();
        anger = new javax.swing.JLabel();
        sorryFor = new javax.swing.JLabel();
        gloating = new javax.swing.JLabel();
        distress = new javax.swing.JLabel();
        shame = new javax.swing.JLabel();
        reproach = new javax.swing.JLabel();
        hate = new javax.swing.JLabel();
        fear = new javax.swing.JLabel();
        fearConfirmed = new javax.swing.JLabel();
        disappointment = new javax.swing.JLabel();
        remorse = new javax.swing.JLabel();
        commander = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle(control.getAgName());
        setBackground(new java.awt.Color(204, 204, 204));
        setResizable(false);

        potencia.setBackground(new java.awt.Color(204, 204, 204));

        happyFor.setText("happyFor: ");
        happyFor.setName("happyFor");

        resentment.setForeground(new java.awt.Color(255, 0, 0));
        resentment.setText("resentment: ");
        resentment.setName("resentment");

        joy.setText("joy: ");
        joy.setName("joy");

        pride.setText("pride: ");
        pride.setName("pride");

        admiration.setText("admiration: ");
        admiration.setName("admiration");

        love.setText("love: ");
        love.setName("love");

        hope.setText("hope: ");
        hope.setName("hope");

        satisfaction.setText("satisfaction: ");
        satisfaction.setName("satisfaction");

        relief.setText("relief: ");
        relief.setName("relief");

        gratification.setText("gratification: ");
        gratification.setName("gratification");

        gratitude.setText("gratitude: ");
        gratitude.setName("gratitude");

        anger.setText("anger: ");
        anger.setName("anger");

        sorryFor.setText("sorryFor: ");
        sorryFor.setName("sorryFor");

        gloating.setText("gloating: ");
        gloating.setName("gloating");

        distress.setText("distress: ");
        distress.setName("distress");

        shame.setText("shame: ");
        shame.setName("shame");

        reproach.setText("reproach: ");
        reproach.setName("reproach");

        hate.setText("hate: ");
        hate.setName("hate");

        fear.setText("fearUnconfirmed: ");
        fear.setName("fearUnconfirmed");

        fearConfirmed.setText("fearConfirmed: ");
        fearConfirmed.setName("fearConfirmed");

        disappointment.setText("disappointment: ");
        disappointment.setName("disappointment");

        remorse.setText("remorse: ");
        remorse.setName("remorse");

		commander.setToolTipText("use '#' to indicate a perception to send to all agents");
        commander.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commanderActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout potenciaLayout = new org.jdesktop.layout.GroupLayout(potencia);
        potencia.setLayout(potenciaLayout);
        potenciaLayout.setHorizontalGroup(
            potenciaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(potenciaLayout.createSequentialGroup()
                .addContainerGap()
                .add(potenciaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(potenciaLayout.createSequentialGroup()
                        .add(happyFor)
                        .addContainerGap(292, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, potenciaLayout.createSequentialGroup()
                        .add(potenciaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(resentment)
                            .add(joy)
                            .add(pride)
                            .add(admiration)
                            .add(love)
                            .add(hope)
                            .add(satisfaction)
                            .add(relief)
                            .add(gratification)
                            .add(gratitude))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 96, Short.MAX_VALUE)
                        .add(potenciaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(sorryFor)
                            .add(gloating)
                            .add(distress)
                            .add(shame)
                            .add(reproach)
                            .add(hate)
                            .add(fear)
                            .add(fearConfirmed)
                            .add(disappointment)
                            .add(remorse)
                            .add(anger))
                        .add(61, 61, 61))
                    .add(potenciaLayout.createSequentialGroup()
                        .add(commander, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 336, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        potenciaLayout.setVerticalGroup(
            potenciaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(potenciaLayout.createSequentialGroup()
                .add(potenciaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(potenciaLayout.createSequentialGroup()
                        .add(happyFor)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(resentment)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(joy)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pride)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(admiration)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(love)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(hope)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(satisfaction)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(relief)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(gratification)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(gratitude))
                    .add(potenciaLayout.createSequentialGroup()
                        .add(sorryFor)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(gloating)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(distress)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(shame)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(reproach)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(hate)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(fear)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(fearConfirmed)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(disappointment)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(remorse)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(anger)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(commander, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Potence", potencia);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void commanderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commanderActionPerformed
        control.request(commander.getText());
        commander.setText("");
    }//GEN-LAST:event_commanderActionPerformed

	protected void updateLabel(javax.swing.JLabel label, Double d) {
		String s = label.getText().split(":")[1]; // pega o segundo
		Double val;

		if (d == null) {
			label.setText(label.getName() + ": 0.0");
        	label.setForeground(new java.awt.Color(0, 0, 0));
			return ;
		}

		val = Double.parseDouble(s);
		
		if ( d > val )
        	label.setForeground(new java.awt.Color(0, 0, 255));
		else if ( d < val )
        	label.setForeground(new java.awt.Color(255, 0, 0));
		else
        	label.setForeground(new java.awt.Color(0, 0, 0));
		
		label.setText(label.getName() + ": " + d);
	}

	public void update() {
		Map<String, Double> m = control.emotion();

		updateLabel(admiration, m.get(admiration.getName()));
		updateLabel(anger, m.get(anger.getName()));
		updateLabel(disappointment, m.get(disappointment.getName()));
		updateLabel(distress, m.get(distress.getName()));
		updateLabel(fear, m.get(fear.getName()));
		updateLabel(fearConfirmed, m.get(fearConfirmed.getName()));
		updateLabel(gloating, m.get(gloating.getName()));
		updateLabel(gratification, m.get(gratification.getName()));
		updateLabel(gratitude, m.get(gratitude.getName()));
		updateLabel(happyFor, m.get(happyFor.getName()));
		updateLabel(hate, m.get(hate.getName()));
		updateLabel(hope, m.get(hope.getName()));
		updateLabel(joy, m.get(joy.getName()));
		updateLabel(love, m.get(love.getName()));
		updateLabel(pride, m.get(pride.getName()));
		updateLabel(relief, m.get(relief.getName()));
		updateLabel(remorse, m.get(remorse.getName()));
		updateLabel(reproach, m.get(reproach.getName()));
		updateLabel(resentment, m.get(resentment.getName()));
		updateLabel(satisfaction, m.get(satisfaction.getName()));
		updateLabel(shame, m.get(shame.getName()));
		updateLabel(sorryFor, m.get(sorryFor.getName()));
	}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel admiration;
    private javax.swing.JLabel anger;
    private javax.swing.JTextField commander;
    private javax.swing.JLabel disappointment;
    private javax.swing.JLabel distress;
    private javax.swing.JLabel fear;
    private javax.swing.JLabel fearConfirmed;
    private javax.swing.JLabel gloating;
    private javax.swing.JLabel gratification;
    private javax.swing.JLabel gratitude;
    private javax.swing.JLabel happyFor;
    private javax.swing.JLabel hate;
    private javax.swing.JLabel hope;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel joy;
    private javax.swing.JLabel love;
    private javax.swing.JPanel potencia;
    private javax.swing.JLabel pride;
    private javax.swing.JLabel relief;
    private javax.swing.JLabel remorse;
    private javax.swing.JLabel reproach;
    private javax.swing.JLabel resentment;
    private javax.swing.JLabel satisfaction;
    private javax.swing.JLabel shame;
    private javax.swing.JLabel sorryFor;
    // End of variables declaration//GEN-END:variables

}
